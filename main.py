# nasdaq_premarket_ai.py (Polygon –≤–µ—Ä—Å–∏—è)

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
import numpy as np
import requests
from datetime import datetime, timedelta
import pytz
import warnings

warnings.filterwarnings("ignore")

API_KEY = "2SrZuWhnRJO5me29ApXRwF9dumhy2PYw"
SYMBOL = "QQQ"
DAYS_BACK = 7

berlin_tz = pytz.timezone("Europe/Berlin")

def get_intraday_data(symbol, date):
    url = f"https://api.polygon.io/v2/aggs/ticker/{symbol}/range/1/minute/{date}/{date}"
    params = {
        "adjusted": "true",
        "sort": "asc",
        "limit": 1000,
        "apiKey": API_KEY
    }
    r = requests.get(url, params=params)
    if r.status_code != 200:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {date}: {r.text}")
        return pd.DataFrame()
    raw = r.json().get("results", [])
    if not raw:
        return pd.DataFrame()
    df = pd.DataFrame(raw)
    df['timestamp'] = pd.to_datetime(df['t'], unit='ms', utc=True).dt.tz_convert("Europe/Berlin")
    df.set_index('timestamp', inplace=True)
    df = df.rename(columns={"o": "Open", "h": "High", "l": "Low", "c": "Close", "v": "Volume"})
    return df[['Open', 'High', 'Low', 'Close', 'Volume']]

def extract_features_and_labels():
    result = []
    skipped = []
    for i in range(DAYS_BACK):
        date = (datetime.now(tz=berlin_tz) - timedelta(days=i)).strftime("%Y-%m-%d")
        df = get_intraday_data(SYMBOL, date)
        if df.empty:
            skipped.append((date, 0, 0))
            continue
        df['Date'] = df.index.date
        morning = df.between_time("10:00", "11:00")
        full_pre = df.between_time("13:00", "13:30")
        if len(morning) < 10 or len(full_pre) < 10:
            skipped.append((date, len(morning), len(full_pre)))
            continue
        open_morning = morning['Open'].iloc[0]
        close_morning = morning['Close'].iloc[-1]
        change_morning = (close_morning - open_morning) / open_morning
        volume_morning = morning['Volume'].mean()
        open_full = full_pre['Open'].iloc[0]
        close_full = full_pre['Close'].iloc[-1]
        change_full = (close_full - open_full) / open_full
        label = "up" if change_full > 0.003 else "down" if change_full < -0.003 else "flat"
        result.append({
            "change_pre": change_morning,
            "volume_pre": volume_morning,
            "label": label
        })
    if skipped:
        print("‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥–Ω–µ–π –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
        for d, m, f in skipped:
            print(f" - {d}: 10‚Äì11 ({m} –º–∏–Ω), 13‚Äì13:30 ({f} –º–∏–Ω)")
    return pd.DataFrame(result)

data = extract_features_and_labels()

if data.empty:
    print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω.")
    exit(0)

X = data[["change_pre", "volume_pre"]]
y = data["label"]
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X, y)

# ========== –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ==========
today = datetime.now(tz=berlin_tz).strftime("%Y-%m-%d")
today_df = get_intraday_data(SYMBOL, today)

if today_df.empty:
    print("‚è≥ –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
else:
    morning_now = today_df.between_time("10:00", "11:00")
    full_now = today_df.between_time("13:00", "13:30")

    if len(morning_now) < 5:
        print("‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö premarket –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (10:00‚Äì11:00).")
    else:
        open_pre = morning_now['Open'].iloc[0]
        close_pre = morning_now['Close'].iloc[-1]
        change_pre = (close_pre - open_pre) / open_pre
        volume_pre = morning_now['Volume'].mean()

        pred = model.predict([[change_pre, volume_pre]])[0]
        proba = model.predict_proba([[change_pre, volume_pre]])[0]
        confidence = round(max(proba) * 100, 1)

        if len(full_now) > 5:
            open_real = full_now['Open'].iloc[0]
            close_real = full_now['Close'].iloc[-1]
            change_real = (close_real - open_real) / open_real
            actual = "up" if change_real > 0.003 else "down" if change_real < -0.003 else "flat"
            print(f"‚úÖ –§–∞–∫—Ç: {actual.upper()} ({change_real*100:.2f}%)")
        else:
            actual = None

        print(f"üìä –£—Ç—Ä–µ–Ω–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (10:00‚Äì11:00): {change_pre*100:.2f}%")
        print(f"üì¶ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º: {volume_pre:.0f}")
        print(f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç –ò–ò: {pred.upper()} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence}%)")
